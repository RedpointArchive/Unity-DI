<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Protoinject</name>
    </assembly>
    <members>
        <member name="T:Protoinject.GeneratedFactoryAttribute">
            <summary>
                This is an attribute added by the factory generator; you should never add
                it manually.
            </summary>
        </member>
        <member name="M:Protoinject.ICurrentNode.GetNodeForFactoryImplementation">
            <summary>
            Do not use this method.
            </summary>
            <returns>The raw node reference for implementing factories.</returns>
        </member>
        <member name="T:Protoinject.IGenerateFactory">
            <summary>
            Your factory interfaces should implement this interface; the post-build hook
            will implement your factories for you.
            </summary>
        </member>
        <member name="T:Protoinject.InjectFieldsForBaseObjectInProtectedConstructorAttribute">
            <summary>
            This attribute allows you to populate the following private fields on
            a class when it's initialized.  This initialization only occurs for
            base classes:
            <list type="bullet">
            <item>private readonly INode _node</item>
            <item>private readonly IHierarchy _hierarchy</item>
            </list>
            <para>
            We allow only these fields to use property injection, because knowing an
            object's place in the hierarchy is critical, and demanding that the injection
            of INode propagate to all derived classes is unnecessary since we know the
            dependency on INode can always be satisfied.
            </para>
            <para>
            For a class using this attribute, you should implement the constructors like
            this:
            </para>
            <code>
            protected MyClass()
            {
                // Constructor which relies on fields being set.
            }
            
            public MyClass(IHierarchy hierarchy, INode node)
            {
                // You must set the fields in the public class.
                _hierarchy = hierarchy;
                _node = node;
            }
            </code>
            <para>
            If you don't wish to allow the class to be constructed publically, you can
            just omit the public constructor, as having only protected constructors will
            ensure that the fields are always set (since it will always be used as a base
            class).
            </para>
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Protoinject.UnityClasses.BaseDictionary`2" -->
        <member name="T:Protoinject.UnityClasses.WeakDictionary`2">
            <summary>
            A generic dictionary, which allows both its keys and values 
            to be garbage collected if there are no other references
            to them than from the dictionary itself.
            </summary>
            
            <remarks>
            If either the key or value of a particular entry in the dictionary
            has been collected, then both the key and value become effectively
            unreachable. However, left-over WeakReference objects for the key
            and value will physically remain in the dictionary until
            RemoveCollectedEntries is called. This will lead to a discrepancy
            between the Count property and the number of iterations required
            to visit all of the elements of the dictionary using its
            enumerator or those of the Keys and Values collections. Similarly,
            CopyTo will copy fewer than Count elements in this situation.
            </remarks>
        </member>
    </members>
</doc>
